#Docker 를 최신버전으로 사용
version: '3'

services:
  #WEB, nginx 라는 도커 컨테이너 실행
  #nginx 라는 이름의 컨테이너를 추가합니다
  nginx:
    build: ./nginx
    volumes:
      - static_volume:/usr/src/app/_static
      - media_volume:/usr/src/app/_media
  #도메인이나 IP주소 뒤에 아무것도 쓰지 않으면 80이 기본값입니다. Nginx를 도입했으니 이제부터는 80번 포트를 사용합니다.
    ports:
      - 80:80
  #이번에 만든 nginx는 web이라는 컨테이너에 의존성을 갖습니다
    depends_on:
      - web
  web:
    #현재 폴더를 Build 앞에서 만든 DOCKERFILE 이 현재 폴더의 있음으로 이 파일을 이용해 컨테이너 이미지를 만듭니다
    build: .
    #Commnad로 터미널에서 직접 입력했던 서버 실행 명령을 대신 입력합니다
    command: bash -c "python manage.py runserver 0.0.0.0:8000 && gunicorn Personal_Blog_prj.wsgi:application --bind 0.0.0.0:8000"
    #Volumes로 로컬 컴퓨터의 폴더와 도커의 폴더를 연결합니다. 여기서는 현재 폴더를 /usr/src/app 폴더와 연결합니다
    volumes:
      - static_volume:/usr/src/app/_static
      - media_volume:/usr/src/app/_media
      - ./:/usr/src/app/
  #장고에서 처리한 결과는 8000번 포트로 expose하도록 변경합니다.
    expose:
      - 8000
    env_file:
      - ./.env.prod
    #Web container는 db 컨테이너가 실행된 이후에 시작해야 한다는 의미로 depends_on을 db로 설정합니다
    depends_on:
      - db
  db:
    #db라는 이름의 컨테이너는 postgres를 실행하기 위해 만든 것입니다. 이미지는 도커에서 공식으로 제공하는 postgres:12.0-alpine 사용
    image: postgres:12.0-alpine
    #volumes를 설정해서 컨테이너 실행이 중단되더라도 데이터베이스의 내용이 사라지지 않도록 합니다
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod.db
volumes:
  #컨테이너가 종료되면 컨테이너 안에 저장되어 있던 내용들도 함꼐 사라지는데, Nginx의 volume 기능을 이용해 저장하면 컨테이너를 다시 실행했을 떄
  #바로 불러올수 있습니다. 예를 들어 웹 사이트 방문자가 정적 파일을 요청하면 장고에게 요청하지 않고 volume에 저장했던 정적 파일을 바로 보내줍니다.
  #volume 이름은 static_volume 으로 하겠습니다. 업로드된 파일을 저장하는 media_volume도 추가합니다.
    postgres_data:
    static_volume:
    media_volume: